name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # AÑADIDO: Reconstruye el Wallet de Oracle desde el secreto
      - name: Decode Oracle Wallet
        run: |
          # Crea un archivo temporal con el contenido del secreto
          echo "${{ secrets.ORACLE_WALLET_BASE64 }}" > wallet_base64.txt
          # Decodifica el base64 para obtener el archivo .zip
          base64 -d wallet_base64.txt > Wallet_DUOCBBDD.zip
          # Descomprime el archivo para recrear la carpeta
          unzip Wallet_DUOCBBDD.zip
          # La carpeta "Wallet_DUOCBBDD" ahora existe y está lista para el build
          
      # Paso 2: Autenticar en DockerHub 
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Paso 3: Construir la imagen de Docker
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/invoices3:latest .

      # Paso 4: Hacer push de la imagen a DockerHub 
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/invoices3:latest

     # Paso 5: Configurar credenciales de AWS para SSH, incluyendo AWS_SESSION_TOKEN
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Cambia a tu región
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Añadido aquí 

      # Paso 5.5:
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Paso 6: Conectarse a EC2 y desplegar el contenedor 
      - name: SSH commands to deploy
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.USER_SERVER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/invoices3:latest
            docker stop invoices3 || true && docker rm invoices3 || true
            docker run -d --name invoices3 \
            -p 8081:8081 \
            -v /mnt/efs/invoices3:/app/storage/invoices \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --restart always \
            ${{ secrets.DOCKERHUB_USERNAME }}/invoices3:latest
      
            echo "🔍 Verificando contenedor... "
            docker ps -f name=invoices3
      
            echo "📦 Últimos logs del contenedor:"
            docker logs --tail 20 invoices3
          EOF
